{"version":3,"sources":["api/postsApi.js","api/usersApi.js","api/CommentsApi.js","Components/Comments/Comment.js","Components/Comments/CommentsList.js","Components/User/User.js","Components/Post/Post.js","Components/PostList/PostList.js","App.js","index.js"],"names":["getPosts","fetch","then","response","ok","json","catch","getUsers","getComments","Comment","_ref","comment","react_default","a","createElement","className","name","body","href","email","defaultProps","postId","id","CommentsList","list","map","item","Comments_Comment","key","User","info","address","city","street","suite","Post","post","title","Components_User_User","user","Comments_CommentsList","comments","PostList","Components_Post_Post","App","_useState","useState","_useState2","Object","slicedToArray","posts","setPosts","_useState3","_useState4","isStarted","setIsStarted","type","placeholder","onChange","event","toConsumableArray","filter","includes","target","value","Components_PostList_PostList","onClick","_ref2","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","objectSpread2","find","singleUser","userId","stop","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a4cc78ee.chunk.js","sourcesContent":["const getPosts = () => fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => 'Error');\n\nexport default getPosts;\n","const getUsers = () => fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => 'Error');\n\nexport default getUsers;\n","const getComments = () => fetch('https://jsonplaceholder.typicode.com/comments')\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => 'Error');\n\nexport default getComments;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => (\n  <article>\n    <h2 className=\"comments__name\">{comment.name}</h2>\n    <p>{comment.body}</p>\n    <p className=\"comments__text\">\n      Comments by&nbsp;\n      <a href={comment.email} className=\"link\">\n        {comment.email}\n      </a>\n    </p>\n  </article>\n);\n\nComment.propTypes\n  = {\n    comment: PropTypes.shape({\n      postId: PropTypes.number,\n      id: PropTypes.number,\n      name: PropTypes.string,\n      email: PropTypes.string,\n      body: PropTypes.string,\n    }),\n  };\n\nComment.defaultProps\n  = {\n    comment: {\n      postId: null,\n      id: null,\n      name: '',\n      email: '',\n      body: '',\n    },\n  };\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentsList = ({ list }) => (\n  <div>\n    {list.map(item => (\n      <Comment comment={item} key={item.name} />\n    ))}\n  </div>\n);\n\nCommentsList.propTypes\n  = { list: PropTypes.arrayOf(PropTypes.object).isRequired };\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './user.css';\n\nconst User = ({ info }) => (\n  <div>\n    <h4>{info.name}</h4>\n    <address>\n      {info.address.city}\n      {info.address.street}\n      {info.address.suite}\n      <a href={info.email} className=\"link link--user\">{info.email}</a>\n    </address>\n  </div>\n);\n\nUser.propTypes\n  = {\n    info: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      address: PropTypes.object.isRequired,\n      phone: PropTypes.string.isRequired,\n      website: PropTypes.string.isRequired,\n      company: PropTypes.object.isRequired,\n    }),\n  };\n\nUser.defaultProps = { info: {} };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentsList from '../Comments/CommentsList';\nimport User from '../User/User';\nimport './post.css';\nimport '../Comments/comments.css';\n\nconst Post = ({ post }) => (\n  <section className=\"post\">\n    <h1 className=\"post__header\">{post.title}</h1>\n    <article>{post.body}</article>\n    <div>\n      <User info={post.user} />\n    </div>\n    <h3 className=\"post__comments comments\">Comments</h3>\n    <div>\n      <CommentsList list={post.comments} />\n    </div>\n  </section>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n    user: PropTypes.object,\n  }),\n};\n\nPost.defaultProps = { post: {} };\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Post';\n\nconst PostList = ({ list }) => (\n  <div>\n    {\n      list.map(item => (\n        <Post list={list} post={item} key={item.id} />\n      ))}\n  </div>\n);\n\nPostList.propTypes = { list: PropTypes.arrayOf(PropTypes.object).isRequired };\nexport default PostList;\n","import React, { useState } from 'react';\nimport getPosts from './api/postsApi';\nimport getUsers from './api/usersApi';\nimport getComments from './api/CommentsApi';\nimport PostList from './Components/PostList/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const loadData = async() => {\n    setIsStarted(true);\n    const [\n      postsFromServer,\n      usersFromServer,\n      commentsFromServer,\n    ] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ]);\n\n    setPosts(postsFromServer.map(post => (\n      {\n        ...post,\n        user: usersFromServer.find(singleUser => singleUser.id === post.userId),\n        comments: commentsFromServer\n          .filter(comment => comment.postId === post.id),\n      })));\n  };\n\n  const filterData = (event) => {\n    setPosts([...posts]\n      .filter(post => post.body.includes(event.target.value)));\n  };\n\n  return (\n    isStarted\n      ? (\n        <section>\n\n          <div className=\"ui input\">\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              onChange={filterData}\n            />\n          </div>\n\n          <PostList list={posts} />\n        </section>\n\n      ) : (\n        <button\n          onClick={loadData}\n          type=\"button\"\n        >\n          {isStarted ? 'Loading...' : 'Load'}\n        </button>\n      )\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}